# - Try to find zlib-library
# Once done this will define
#
#  ZLIB_INCLUDE_DIR    - where to find zlib.h, etc.
#  ZLIB_INCLUDE_DIRS   - same as above (uncached version)
#  ZLIB_LIBRARIES      - list of libraries when using zlib.
#  ZLIB_FOUND          - True if zlib was found.
#  ZLIB_VERSION_STRING - The version of zlib found (x.y.z)
#  ZLIB_VERSION_MAJOR  - The major version of zlib
#  ZLIB_VERSION_MINOR  - The minor version of zlib
#  ZLIB_VERSION_PATCH  - The patch version of zlib
#  ZLIB_VERSION_TWEAK  - The tweak version of zlib

IF(ZLIB_INCLUDE_DIR)
  SET(ZLIB_FIND_QUIETLY TRUE)
ENDIF(ZLIB_INCLUDE_DIR)

FIND_PATH(ZLIB_INCLUDE_DIR zlib.h
   PATHS
   $ENV{ZLIB_HOME}/include
   $ENV{EXTERNLIBS}/zlib/include
   DOC "zlib - Headers"
   NO_DEFAULT_PATH
)
FIND_PATH(ZLIB_INCLUDE_DIR zlib.h DOC "zlib - Headers")

MARK_AS_ADVANCED(ZLIB_INCLUDE_DIR)

IF(ZLIB_INCLUDE_DIR AND EXISTS "${ZLIB_INCLUDE_DIR}/zlib.h")
    FILE(STRINGS "${ZLIB_INCLUDE_DIR}/zlib.h" ZLIB_H REGEX "^#define ZLIB_VERSION \"[^\"]*\"$")

    STRING(REGEX REPLACE "^.*ZLIB_VERSION \"([0-9]+).*$" "\\1" ZLIB_VERSION_MAJOR "${ZLIB_H}")
    STRING(REGEX REPLACE "^.*ZLIB_VERSION \"[0-9]+\\.([0-9]+).*$" "\\1" ZLIB_VERSION_MINOR  "${ZLIB_H}")
    STRING(REGEX REPLACE "^.*ZLIB_VERSION \"[0-9]+\\.[0-9]+\\.([0-9]+).*$" "\\1" ZLIB_VERSION_PATCH "${ZLIB_H}")
    SET(ZLIB_VERSION_STRING "${ZLIB_VERSION_MAJOR}.${ZLIB_VERSION_MINOR}.${ZLIB_VERSION_PATCH}")

    # only append a TWEAK version if it exists:
    SET(ZLIB_VERSION_TWEAK "")
    IF( "${ZLIB_H}" MATCHES "^.*ZLIB_VERSION \"[0-9]+\\.[0-9]+\\.[0-9]+\\.([0-9]+).*$")
        SET(ZLIB_VERSION_TWEAK "${CMAKE_MATCH_1}")
        SET(ZLIB_VERSION_STRING "${ZLIB_VERSION_STRING}.${ZLIB_VERSION_TWEAK}")
    ENDIF( "${ZLIB_H}" MATCHES "^.*ZLIB_VERSION \"[0-9]+\\.[0-9]+\\.[0-9]+\\.([0-9]+).*$")

    SET(ZLIB_MAJOR_VERSION "${ZLIB_VERSION_MAJOR}")
    SET(ZLIB_MINOR_VERSION "${ZLIB_VERSION_MINOR}")
    SET(ZLIB_PATCH_VERSION "${ZLIB_VERSION_PATCH}")
ENDIF()

IF (MSVC)
    # check whether this is a /MT(d) build
    STRING(REGEX MATCH "[mM][tT][dD]" MTD_COMPILE_OPTION ${CMAKE_C_FLAGS_DEBUG})
    IF (MTD_COMPILE_OPTION)
      # MESSAGE("Using static MS-Runtime !!!")
      FIND_LIBRARY(ZLIB_LIBRARY_DEBUG NAMES zlibd_mt
        PATHS
        $ENV{ZLIB_HOME}/lib
        $ENV{EXTERNLIBS}/zlib/lib
      )
      FIND_LIBRARY(ZLIB_LIBRARY_RELEASE NAMES zlib_mt
        PATHS
        $ENV{ZLIB_HOME}/lib
        $ENV{EXTERNLIBS}/zlib/lib
      )
    ELSE (MTD_COMPILE_OPTION)
      FIND_LIBRARY(ZLIB_LIBRARY_DEBUG NAMES zlibd zlib1d_i
        PATHS
        $ENV{ZLIB_HOME}/lib
        $ENV{EXTERNLIBS}/zlib/lib
      )
      FIND_LIBRARY(ZLIB_LIBRARY_RELEASE NAMES zlib zlib1_i
        PATHS
        $ENV{ZLIB_HOME}/lib
        $ENV{EXTERNLIBS}/zlib/lib
      )
    ENDIF (MTD_COMPILE_OPTION)

    IF(MSVC_IDE)
      IF (ZLIB_LIBRARY_DEBUG AND ZLIB_LIBRARY_RELEASE)
         SET(ZLIB_LIBRARIES optimized ${ZLIB_LIBRARY_RELEASE} debug ${ZLIB_LIBRARY_DEBUG})
      ELSE (ZLIB_LIBRARY_DEBUG AND ZLIB_LIBRARY_RELEASE)
         SET(ZLIB_LIBRARIES NOTFOUND)
         MESSAGE(STATUS "Could not find the debug AND release version of zlib")
      ENDIF (ZLIB_LIBRARY_DEBUG AND ZLIB_LIBRARY_RELEASE)
    ELSE(MSVC_IDE)
      STRING(TOLOWER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE_TOLOWER)
      IF(CMAKE_BUILD_TYPE_TOLOWER MATCHES debug)
         SET(ZLIB_LIBRARIES ${ZLIB_LIBRARY_DEBUG})
      ELSE(CMAKE_BUILD_TYPE_TOLOWER MATCHES debug)
         SET(ZLIB_LIBRARIES ${ZLIB_LIBRARY_RELEASE})
      ENDIF(CMAKE_BUILD_TYPE_TOLOWER MATCHES debug)
    ENDIF(MSVC_IDE)
    MARK_AS_ADVANCED(ZLIB_LIBRARY_DEBUG ZLIB_LIBRARY_RELEASE)

ELSE (MSVC)
  
  FIND_LIBRARY(ZLIB_LIBRARY NAMES z zlib zdll
    PATHS
    $ENV{ZLIB_HOME}/lib
    $ENV{EXTERNLIBS}/zlib/lib
    NO_DEFAULT_PATH
  )
  FIND_LIBRARY(ZLIB_LIBRARY NAMES z zlib zdll)

  IF (ZLIB_LIBRARY)
    SET(ZLIB_LIBRARIES ${ZLIB_LIBRARY})
  ELSE (ZLIB_LIBRARY)
    SET(ZLIB_LIBRARIES NOTFOUND)
    MESSAGE(STATUS "Could not find zlib-library")    
  ENDIF (ZLIB_LIBRARY)
  MARK_AS_ADVANCED(ZLIB_LIBRARY)
  
ENDIF (MSVC)

INCLUDE(FindPackageHandleStandardArgs)

IF(MSVC)
  FIND_PACKAGE_HANDLE_STANDARD_ARGS(ZLIB DEFAULT_MSG ZLIB_LIBRARY_RELEASE ZLIB_LIBRARY_DEBUG ZLIB_INCLUDE_DIR)
  MARK_AS_ADVANCED(ZLIB_LIBRARY_RELEASE ZLIB_LIBRARY_DEBUG)
ELSE(MSVC)
  FIND_PACKAGE_HANDLE_STANDARD_ARGS(ZLIB DEFAULT_MSG ZLIB_LIBRARY ZLIB_INCLUDE_DIR)
  MARK_AS_ADVANCED(ZLIB_LIBRARY)
ENDIF(MSVC)
