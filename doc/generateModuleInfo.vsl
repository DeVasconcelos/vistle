import os
import sys
sys.path.insert(0, os.path.dirname(os.path.realpath(__file__)) )
from GenModInfo.genModInfo import run
run()

#import time
#import os
#from PIL.Image import Image
#
#
#def createModuleImage(name, inPorts, outPorts):
#    
#    size = 70
#    letterWidth = 58 / 100 * size
#    widths = [len(name) * letterWidth + size, size * (len(inPorts) + 1), size * (len(outPorts) + 1) ]
#    width = max(widths)
#    height = 3*size
#    
#    image = "<svg width=\"" + str(width) + "\" height=\"" + str(height) + "\" >\n"
#    image += getRect(0, 0, width, height, "#64c8c8ff", 5, 5) + "\n"
#
#    portDistance = size/5
#    portStartPos = portDistance
#    for p in inPorts:
#        image += getRect(portStartPos, 0, size , size, color="#c81e1eff", tooltip=p) + "\n"
#        image+=getRectTooltip(p)
#        portStartPos += portDistance + size
#
#    portStartPos = portDistance
#    for p in outPorts:
#        image += getRect(portStartPos, height - size, size, size, color="#c8c81eff", tooltip=p) + "\n"
#        portStartPos += portDistance + size
#    image += getText(name, portDistance, 1.8*size, 6/100 * size)
#    image += "</svg>"
#    return image
#
#def getText(text, x, y, size):
#    return "<text x=\"" + str(x) + "\" y=\"" + str(y) + "\" font-size=\"" + str(size) + "em\">" + text + "</text>"
#
#def getRectTooltip(tooltip):
#    return "<title>" + tooltip + "</title></rect>"
#
#def getRect(x, y , width, height, color, rx = 0, ry = 0, tooltip = ""):
#    rect = "<rect "
#    rect += "x=\"" + str(x) + "\" "
#    rect += "y=\"" + str(y) + "\" "
#    rect += "width=\"" + str(width) + "\" "
#    rect += "height=\"" + str(height) + "\" "
#    rect += "rx=\"" + str(rx) + "\" "
#    rect += "ry=\"" + str(ry) + "\" "
#    rect += "style=\"fill:" + color + ";\""
#    if len(tooltip) > 0:
#        rect += " >\n"
#        rect +=  getRectTooltip(tooltip)
#    else:
#        rect += " />"
#    return rect
#
#
#def getHeadline(line, type):
#    if len(line) == 0:
#        return ""
#    return type + " " + line + "\n"
#
#def getTableLine(entries):
#    retval = "|"
#    for entry in entries:
#        retval += entry + "|" 
#    retval += "\n"
#    return retval
#
#def getComment(comment):
#    return "[" + comment + "]:<>"
#
#def getModuleHeadLine(mod):
#    name = getModuleName(mod)
#    desc = getModuleDescription(mod)
#    begin = desc[0:1].upper() #convert first letter to upper case
#    desc = begin + desc[1:]
#    return "\n" + getHeadline(name, "#")  + desc + "\n"
#    
#def getModuleHtml(mod):
#    return  "\n" + createModuleImage(getModuleName(mod), getInputPorts(mod), getOutputPorts(mod)) + "\n"
#
#def getPortDescriptionString(mod, ports, headline):
#    portsDescription = "\n"
#    if len(ports) > 0:
#        portsDescription += getHeadline(headline, "##") 
#        portsDescription += getTableLine(["name", "description"]) + getTableLine(["-", "-"])
#    for port in ports:
#        portsDescription += getTableLine([port,getPortDescription(mod, port)])
#    portsDescription += "\n" 
#    return portsDescription
#
#def getInputPortsStringDescription(mod):
#    return getPortDescriptionString(mod, getInputPorts(mod), "Input ports")
#
#def getOutputPortsDescription(mod):
#    return getPortDescriptionString(mod, getOutputPorts(mod), "Output ports")
#
#def getParametersString(mod):
#    allParams = getParameters(mod)
#    params = []
#    for param in allParams:
#        if param[0] != '_':
#            params.append(param)
#    paramString = "\n"
#    if len(params) > 0:
#        paramString += getHeadline("Parameters", "##") + getTableLine(["name", "description", "type"]) + getTableLine(["-", "-", "-"])
#    for param in params:
#        paramString += getTableLine([param, getParameterTooltip(mod, param), getParameterType(mod, param)])
#    return paramString
#
#def readAdditionalDocumentation(filename):
#    content = ""
#    if os.path.isfile(filename):
#        f = open(filename, "r")
#        content = f.read()
#        f.close()
#    return content
#
#class ImageSignature:
#    def __init__(self, beginSequenz, endSequenz):
#        self.beginSequenz = beginSequenz
#        self.endSequenz = endSequenz
#
#def relinkImages(file, sourceDir, destDir):
#    imageSignatures = [ImageSignature("![](", ")"), ImageSignature("<img src=\"", "\"")]
#    positions = []
#    for imageSignature in imageSignatures:
#        begin = -1
#        end = 0
#        while True:
#            begin = file[end : ].find(imageSignature.beginSequenz)
#            if begin == -1:
#                break
#            begin += end + len(imageSignature.beginSequenz)
#            end = begin + file[begin : ].find(imageSignature.endSequenz)
#            positions.append((begin, end))
#    if len(positions) == 0:
#        return file
#    positions.sort(key=lambda pos : pos[0])
#    newFile = file[0:positions[0][0]]
#    for i in range(len(positions)):
#        image = file[positions[i][0] : positions[i][1]]
#        if image[0] != "/": #keep absolute path (altough they don't seem to work)
#            image = os.path.relpath(sourceDir, destDir) + "/" + image  
#        end = len(file)
#        if i < len(positions) - 1:
#            end = positions[i+1][0]
#        newFile += image + file[positions[i][1] : end]
#
#    return newFile
#
## <img src="isosurfaceExample.png" alt="drawing" style="width:600px;"/>
#def removeEmptyLinesFromEnd(file):
#    while True:
#        if file[len(file) - 1] == '\n':
#            file = file[0 : len(file) - 1]
#        else: 
#            break
#    file += "\n"
#    return file
#
#class Replacement:
#    replacedTag = "" 
#    replacement = "" 
#    tagFoundPos = -1
#    def __init__(self, replacedTag, replacement):
#        self.replacedTag = replacedTag           
#        self.replacement = replacement           
#
##these have to be set to chose the module to create documentation for
#target = os.environ['VISTLE_DOCUMENTATION_TARGET']
#sourceDir = os.environ['VISTLE_DOCUMENTATION_DIR']
#filename = sourceDir +  "/" + target + ".md"
#
##spawn the module and wait for its information to arrive at the hub
#mod = spawn(target)
#barrier()
#
#content = readAdditionalDocumentation(filename)
#destDir = os.path.dirname(os.path.realpath(__file__)) + "/moduleDescriptions/"
#content = relinkImages(content, sourceDir, destDir)
##these replacements get inserted at in the additional documentation at the beginning or
##if the tag is used it replaces this tag
#replacements = [Replacement(getComment("headline"), getModuleHeadLine(mod)), Replacement(getComment("moduleHtml"), getModuleHtml(mod)), Replacement(getComment("inputPorts"), getInputPortsStringDescription(mod)), Replacement(getComment("outputPorts"), getOutputPortsDescription(mod)), Replacement(getComment("parameters"), getParametersString(mod))]
#
#newContent = ""
##get the position of the replacementsTags (only the forst one found is considered)
##and place the replacements that are not used at the beginning
#for replacement in replacements:
#    replacement.tagFoundPos = content.find(replacement.replacedTag)
#    if replacement.tagFoundPos == -1:
#        newContent += replacement.replacement
#
#
##sort to use the used tags in the wright order 
#replacements.sort(key= lambda replacement: replacement.tagFoundPos)
#
##replace the tags with the replacement
#oldPos = 0
#for replacement in replacements:
#    if replacement.tagFoundPos >= 0:
#        newContent += content[oldPos : replacement.tagFoundPos] + replacement.replacement
#        oldPos = replacement.tagFoundPos + len(replacement.replacedTag)
#newContent += content[oldPos :]
#
#newContent = removeEmptyLinesFromEnd(newContent)
#f = open(destDir + target + ".md", "w")
#f.write(newContent)
#f.close()
#quit()
