import time
import os

def getHeadline(line, type):
    if len(line) == 0:
        return
    retval = line + "\n"
    for i in range (len(line)):
        retval += type
    retval += "\n"
    return retval

def getTableLine(entries):
    retval = "|"
    for entry in entries:
        retval += entry + "|" 
    retval += "\n"
    return retval

def getPortsTable(names, descriptions):
    retval = ""
    if len(names) > 0:
        retval += getTableLine(["name", "description"]) + getTableLine(["-", "-"])
    for i in range(len(names)):
        retval += getTableLine([names[i], descriptions[i]])
    retval += "\n" 
    return retval

def readUntil(file, tag):
    while True:
        line = file.readline()
        pos = line.find(tag)
        if not line:
            break
        if pos != -1:
            if file.tell() - pos < 0:
                file.seek(0,0)
            else:
                file.seek(file.tell() - pos, 0)
            break

            
def cacheUntil(file, tag):
    
    cache = ""
    while True:
        line = file.readline()
        pos = line.find(tag)
        if not line:
            break
        if pos == -1:
            cache += line
        else:
            cache += line[0 : pos]
            break
    return cache

def getComment(comment):
    return "[" + comment + "]:<>\n"

def cacheOldFile(file, comments): #returns a list with len(comments) + 1 with content before and after the commented sections
    contents = {}
    f.seek(0,0)
    for comment in comments:
        c = "[" + comment + "]:<>"
        contents[comment] = cacheUntil(file, c)
        readUntil(file, c)
    print(contents)
    return contents

def getSection(content, tag, cache):
    return cache[tag] + getComment(tag) + content + getComment(tag)


def getModuleDescriptionString(mod, cache):
    name = getModuleName(mod)
    description = getSection(getHeadline(name + " - " + getModuleDescription(mod), "="), "headline", cache)
    
    ports = getInputPorts(mod)
    desc = getInputPortsDescriptions(mod)
    inputPorts = ""
    if len(ports) > 0:
        inputPorts += getHeadline("Input ports", "-") + getPortsTable(ports, desc) + "\n"
    description += getSection(inputPorts, "inputPorts", cache)


    ports = getOutputPorts(mod)
    desc = getOutputPortsDescriptions(mod)
    outputPorts = ""
    if len(ports) > 0:
        outputPorts += getHeadline("Output ports", "-") + getPortsTable(ports, desc) + "\n"
    description += getSection(outputPorts, "outputPorts", cache)

    allParams = getParameters(mod)
    params = []
    for param in allParams:
        if param[0] != '_':
            params.append(param)
    paramString = ""
    if len(params) > 0:
        paramString += getHeadline("Parameters", "-") + getTableLine(["name", "type", "description"]) + getTableLine(["-", "-", "-"])
    for param in params:
        paramString += getTableLine([param, getParameterType(mod, param), getParameterTooltip(mod, param)])
    paramString += "\n"
    description += getSection(paramString, "parameters", cache)

    description += cache["end of file"]
    return description


def deleteEmptyLines(file):
    file.seek(0, os.SEEK_END)

    # This code means the following code skips the very last character in the file -
    # i.e. in the case the last line is null we delete the last line
    # and the penultimate one
    pos = file.tell() - 1

    # Read each character in the file one at a time from the penultimate
    # character going backwards, searching for a newline character
    # If we find a new line, exit the search
    while (pos > 0 and file.read(1) != "\n"):
        pos -= 1
        file.seek(pos, os.SEEK_SET)

    # So long as we're not at the start of the file, delete all the characters ahead
    # of this position
    if pos > 0:
        file.seek(pos, os.SEEK_SET)
        file.truncate()
        return True
    return False

def setFileEnding(file):
    while deleteEmptyLines(file):
        pass

dir = os.environ['VISTLE_DOCUMENTATION_DIR']
target = os.environ['VISTLE_DOCUMENTATION_TARGET']

filename = dir + "/" + target + ".md"
print(filename)
if not os.path.isfile(filename):
    f = open(filename, "w")
    f.close()
f = open(filename, "r+")
comments = ["headline", "inputPorts", "outputPorts", "parameters", "end of file"]
cache = cacheOldFile(f, comments)
mod = spawn(target)
barrier()
f.seek(0,0)
f.write(getModuleDescriptionString(mod, cache))
#deleteEmptyLines(f)
f.close()
quit()
