import time
import os

def getHeadline(line, type):
    if len(line) == 0:
        return
    return type + " " + line + "\n"

def getTableLine(entries):
    retval = "|"
    for entry in entries:
        retval += entry + "|" 
    retval += "\n"
    return retval

def getPortsTable(names, descriptions):
    retval = ""
    if len(names) > 0:
        retval += getTableLine(["name", "description"]) + getTableLine(["-", "-"])
    for i in range(len(names)):
        retval += getTableLine([names[i], descriptions[i]])
    retval += "\n" 
    return retval

def getComment(comment):
    return "[" + comment + "]:<>"

def getModuleHeadLine(mod):
    name = getModuleName(mod)
    desc = getModuleDescription(mod)
    begin = desc[0:1].upper() #convert first letter to upper case
    desc = begin + desc[1:]
    return "\n" + getHeadline(name, "#")  + desc + "\n"

def getInputPortsString(mod):
    ports = getInputPorts(mod)
    desc = getInputPortsDescriptions(mod)
    inputPorts = "\n"
    if len(ports) > 0:
        inputPorts += getHeadline("Input ports", "##") + getPortsTable(ports, desc) + "\n"
    return inputPorts


def getOutputPortsString(mod):
    ports = getOutputPorts(mod)
    desc = getOutputPortsDescriptions(mod)
    outputPorts = "\n"
    if len(ports) > 0:
        outputPorts += getHeadline("Output ports", "##") + getPortsTable(ports, desc) + "\n"
    return outputPorts

def getParametersString(mod):
    allParams = getParameters(mod)
    params = []
    for param in allParams:
        if param[0] != '_':
            params.append(param)
    paramString = "\n"
    if len(params) > 0:
        paramString += getHeadline("Parameters", "##") + getTableLine(["name", "type", "description"]) + getTableLine(["-", "-", "-"])
    for param in params:
        paramString += getTableLine([param, getParameterType(mod, param), getParameterTooltip(mod, param)])
    return paramString

def readAdditionalDocumentation(filename):
    content = ""
    if os.path.isfile(filename):
        f = open(filename, "r")
        content = f.read()
        f.close()
    return content

class ImageSignature:
    def __init__(self, beginSequenz, endSequenz):
        self.beginSequenz = beginSequenz
        self.endSequenz = endSequenz

def relinkImages(file, sourceDir, destDir):
    imageSignatures = [ImageSignature("![](", ")"), ImageSignature("<img src=\"", "\"")]
    positions = []
    for imageSignature in imageSignatures:
        begin = -1
        end = 0
        while True:
            begin = file[end : ].find(imageSignature.beginSequenz)
            if begin == -1:
                break
            begin += end + len(imageSignature.beginSequenz)
            end = begin + file[begin : ].find(imageSignature.endSequenz)
            positions.append((begin, end))
    if len(positions) == 0:
        return file
    positions.sort(key=lambda pos : pos[0])
    newFile = file[0:positions[0][0]]
    for i in range(len(positions)):
        image = file[positions[i][0] : positions[i][1]]
        if image[0] != "/": #keep absolute path (altough they don't seem to work)
            image = os.path.relpath(sourceDir, destDir) + "/" + image  
        end = len(file)
        if i < len(positions) - 1:
            end = positions[i+1][0]
        newFile += image + file[positions[i][1] : end]

    return newFile


# <img src="isosurfaceExample.png" alt="drawing" style="width:600px;"/>
def removeEmptyLinesFromEnd(file):
   
    while True:
        if file[len(file) - 1] == '\n':
            file = file[0 : len(file) - 1]
        else: 
            break
    file += "\n"
    return file

class Replacement:
    replacedTag = "" 
    replacement = "" 
    tagFoundPos = -1
    def __init__(self, replacedTag, replacement):
        self.replacedTag = replacedTag           
        self.replacement = replacement           

#these have to be set to chose the module to create documentation for
target = os.environ['VISTLE_DOCUMENTATION_TARGET']
sourceDir = os.environ['VISTLE_DOCUMENTATION_DIR']
filename = sourceDir +  "/" + target + ".md"

#spawn the module and wait for its information to arrive at the hub
mod = spawn(target)
barrier()


content = readAdditionalDocumentation(filename)
destDir = os.path.dirname(os.path.realpath(__file__)) + "/moduleDescriptions/"
content = relinkImages(content, sourceDir, destDir)
#these replacements get inserted at in the additional documentation at the beginning or
#if the tag is used it replaces this tag
replacements = [Replacement(getComment("headline"), getModuleHeadLine(mod)), Replacement(getComment("inputPorts"), getInputPortsString(mod)), Replacement(getComment("outputPorts"), getOutputPortsString(mod)), Replacement(getComment("parameters"), getParametersString(mod))]

#get the position of the replacementsTags (only the forst one found is considered)
for replacement in replacements:
    replacement.tagFoundPos = content.find(replacement.replacedTag)

newContent = ""

#put the replacements that are not used at the beginning
for replacement in replacements:
    if replacement.tagFoundPos == -1:
        newContent += replacement.replacement

#sort to use the used tags in the wright order 
replacements.sort(key= lambda replacement: replacement.tagFoundPos)

#replace the tags with the replacement
oldPos = 0
for replacement in replacements:
    if replacement.tagFoundPos >= 0:
        newContent += content[oldPos : replacement.tagFoundPos] + replacement.replacement
        oldPos = replacement.tagFoundPos + len(replacement.replacedTag)
newContent += content[oldPos :]


newContent = removeEmptyLinesFromEnd(newContent)
f = open(destDir + target + ".md", "w")
f.write(newContent)
f.close()
quit()
